# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: new
  demands: maven


steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

# - task: Maven@4
#   inputs:
#     mavenPomFile: 'pom.xml'
#     goals: '-DskipTests clean package'
#     publishJUnitResults: false
#     javaHomeOption: 'JDKVersion'
#     mavenVersionOption: 'Default'
#     mavenAuthenticateFeed: false
#     effectivePomSkip: false
#     sonarQubeRunAnalysis: false

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'My_SonarQube'
    scannerMode: 'Other'
    extraProperties: |
      # Additional properties that will be passed to the scanner,
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.projectKey=test_test_AYmWL0WGDH_Q_LsaYEmG
      sonar.projectName=test
      sonar.projectVersion=1.0.0.0
      sonar.sources=src/main/java/
      sonar.language=java
      sonar.sourceEncoding=UTF-8


- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    goals: '-DskipTests clean package'
    publishJUnitResults: true
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: Bash@3
  displayName: 'Run sonar:sonar'
  inputs:
    targetType: 'inline'
    script: |
      export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
      mvn sonar:sonar   

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

- task: Docker@2
  inputs:
    containerRegistry: 'docker'
    repository: 'poojajeeva/azurejava'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(Build.BuildId)
      latest


- task: KubernetesManifest@1
  inputs:
    action: 'deploy'
    connectionType: 'kubernetesServiceConnection'
    kubernetesServiceConnection: 'aks'
    namespace: 'default'
    manifests: 'deployment.yaml'