
 
pipeline {

    agent any

    parameters
    {
        
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '071241535602')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'ap-south-1')
        string(name: 'ImageName', description: "name of the docker build", defaultValue: 'javapp')
        string(name: 'ImageTag', description: "tag of the docker build", defaultValue: 'v1')
        string(name: 'DockerHubUser', description: "name of the Application", defaultValue: 'poojajeeva')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    } 
    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }
    stages{
        stage('Connect to EKS cluster'){     
            steps{
               script{
                  sh """
                  aws configure set aws_access_key_id "$ACCESS_KEY"
                  aws configure set aws_secret_access_key "$SECRET_KEY"
                  aws configure set region "${params.Region}"
                  aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}
                  curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"
                  chmod u+x ./kubectl
                  kubectl apply -f .
                  """
               }   
            }
        }
        stage('Deployment of AKS cluster'){      
            steps{
               script{
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'K8S', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                  sh ('kubectl apply -f .')
                  }
                  
               }   
            }
        }
        
        
    }
}
