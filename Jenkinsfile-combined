
 
pipeline {

    agent any

    parameters
    {
        choice(name: 'DeploymentDestination', choices: 'AWS\nAzure\nGCP', description: "Choose the deployment destination")
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '071241535602')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'ap-south-1')
        string(name: 'ImageName', description: "name of the docker build", defaultValue: 'javapp')
        string(name: 'ImageTag', description: "tag of the docker build", defaultValue: 'v1')
        string(name: 'DockerHubUser', description: "name of the Application", defaultValue: 'poojajeeva')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
		string(name: 'ResourceGroup', description: "name of the Resource Group", defaultValue: 'myResourceGroup')
    } 
    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
		SPUSERNAME = credentials('spusername')
        SPPWD = credentials('sppwd')
        SPTENANT = credentials('sptenant')
    }
    stages{


        stage('Deploy to EKS cluster'){  
			when { expression { params.DeploymentDestination == 'AWS' } }
            steps{
               script{
                  sh """
                   aws configure set aws_access_key_id "$ACCESS_KEY"
                   aws configure set aws_secret_access_key "$SECRET_KEY"
                   aws configure set region "${params.Region}"
                   aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}
                   curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"
                   chmod u+x ./kubectl
                   kubectl apply -f .
                  """
               }   
            }
        }

        stage('Deployment of AKS cluster'){   
			when { expression { params.DeploymentDestination == 'Azure' } }
            steps{
               script{
                  sh """
					az login --service-principal --username "$SPUSERNAME" --password "$SPPWD" --tenant "$SPTENANT"
					az aks get-credentials --resource-group ${params.ResourceGroup} --name ${params.cluster}
					kubectl apply -f .
                  """  
               }   
            }
        }
        
        
    }
}
